.dropdown {
    position: relative;
    font-size: 16px;
    color: #FFF;
}

/**
    Hide the checkbox itself. Checking and unchecking 
    it we will be done via the label element.
*/

input[type=checkbox] {
    display: none;
}

/* Click to expand button */

label {
    display: flex;
    width: 100%;
    background-color: #6ec2de;
    padding: 15px 30px;
    text-align: center;
    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.2);
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    border-radius: 25px;
}

.menuHidden {
    background-color: #6ec2de;
    display: block;
    list-style: none;
    text-align: left;
    width: 100%;
    display: none;
    z-index: 1;
    border: 2px solid #6ec2de;
}
    .menuHidden li {
        background-color: #6ec2de;
        padding: 15px;
        border-radius: 25px;
    }

        .menuHidden li:hover {
            background-color: #FFF;
            color: #6ec2de;
        }

        .menuHidden li a {
            color: inherit;
            text-decoration: none;
        }

/**

    By using the Following-sibling selector (~),
    we can target elements positioned after our checkbox in the DOM tree.

    With the state pseudo selector (:checked),
    we can make changes depending on the state of the checkbox.

    Using this combination of selectors
    allows to change the color of the label
    and show the list of items
    only when the checkbox is checked.

*/

input[type=checkbox]:checked ~ label {
    background-color: #666666;
}

input[type=checkbox]:checked ~ ul {
    display: block;
}
